const uint8_t ROWS = 4;
const uint8_t COLS = 4;
char keys[ROWS][COLS] = {
  { '1', '2', '3', 'A' },
  { '4', '5', '6', 'B' },
  { '7', '8', '9', 'C' },
  { '*', '0', '#', 'D' }
};

uint8_t colPins[COLS] = { 5, 4, 3, 2 }; // Pins connected to C1, C2, C3, C4
uint8_t rowPins[ROWS] = { 9, 8, 7, 6 }; // Pins connected to R1, R2, R3, R4

Keypad keypad = Keypad(makeKeymap(keys), rowPins, colPins, ROWS, COLS);
/////////////////////////////////
#include "SevSeg.h"
SevSeg sevseg;
/////////////////////////////////
int SPEAKER = 10;    // The speaker is on pin 8
int freq = 50;      // Starting frequency
////////////////////////////////

;
int STCP_pin =3;
int SHCP_pin = 2 ;

int dec_digits  [10] {1,79,18,6,76,36,32,15,0,4};


void setup() {
 Serial.begin(9600);
/////////////////////////
{
	//Set to 1 for single digit display
	byte numDigits = 1;

	//defines common pins while using multi-digit display. Left empty as we have a single digit display
	byte digitPins[] = {};

	//Defines arduino pin connections in order: A, B, C, D, E, F, G, DP
	byte segmentPins[] = {3, 2, 8, 7, 6, 4, 5, 9};
	bool resistorsOnSegments = true;

	//Initialize sevseg object. Uncomment second line if you use common cathode 7 segment
	sevseg.begin(COMMON_ANODE, numDigits, digitPins, segmentPins, resistorsOnSegments);
	//sevseg.begin(COMMON_CATHODE, numDigits, digitPins, segmentPins, resistorsOnSegments);

	sevseg.setBrightness(90);
}
//////////////////////////////////////
 {
  // put your setup code here, to run once:
{
    pinMode(SPEAKER, OUTPUT);
}
}
{

  pinMode(DS_pin,  OUTPUT);
  pinMode(STCP_pin, OUTPUT);
  pinMode(SHCP_pin, OUTPUT);
}






}

//////////////////

void loop() {
  // put your main code here, to run repeatedly:
 {
  char key = keypad.getKey();

  if (key != NO_KEY) {
    Serial.println(key);
  }
}
//////////////////////////////////////
{ 
   //Display numbers one by one with 2 seconds delay
   for(int i = 0; i < 10; i++)
   {
     sevseg.setNumber(i);
     sevseg.refreshDisplay(); 
     delay(2000);
   }
}
/////////////////////////////////////////
  freq += 100;      // add 100 to freq
 
    if (freq >1000)
    {
        noTone(SPEAKER);
        freq = 100;
    }
 
    tone(SPEAKER, freq);
 
    delay(100);

/////////////////////////////
{ 

  
for (int j=0;j<10;j++){  
for (int i=0;i<10;i++){
  digitalWrite(STCP_pin,LOW);
  shiftOut(DS_pin, SHCP_pin, LSBFIRST,dec_digits[i]);
  shiftOut(DS_pin, SHCP_pin, LSBFIRST,dec_digits[j]);
  digitalWrite(STCP_pin,  HIGH);
  delay(300);
}
}
} 

}
}
